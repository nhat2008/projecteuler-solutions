# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# some ways for implementing fibonacci in python
# solution 1: swap
def fib1(n):
    x, y = 1, 1
    for i in range(n - 1):
        x, y = y, x + y
    return x
print fib1(7)

# solution 2: recursion
def fib2(n):
    if n == 1 or n == 2:
        return 1
    return fib2(n - 1) + fib2(n - 2)
print fib2(7)

# solution 3: generators => i love python generators so much
# Complete the function below.
def fibo_generator():
    a,b = 0,1
    while 1:
        yield b
        a,b = b, a+b
def fib3(n):
    fibo_ge = fibo_generator()
    item = 0
    for i in range(n):
        item = fibo_ge.next()
    return item

print fib3(7)


# solution for euler

def fibonacci():
    x = 1
    y = 2
    while True:
        yield x
        temp = x + y
        x = y
        y = temp

def fib_even():
    result = 0
    for x in fibonacci():
        if x >= 4000000:
            break
        if x % 2 == 0:
            result = result + x
    return result

print fib_even()






